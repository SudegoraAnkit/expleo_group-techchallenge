/*
 * generated by Xtext 2.38.0
 */
grammar InternalSoftwareArchitectureDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.expleo.sarch.dsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.expleo.sarch.dsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.expleo.sarch.dsl.services.SoftwareArchitectureDslGrammarAccess;

}
@parser::members {
	private SoftwareArchitectureDslGrammarAccess grammarAccess;

	public void setGrammarAccess(SoftwareArchitectureDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleArchitecture
entryRuleArchitecture
:
{ before(grammarAccess.getArchitectureRule()); }
	 ruleArchitecture
{ after(grammarAccess.getArchitectureRule()); } 
	 EOF 
;

// Rule Architecture
ruleArchitecture 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArchitectureAccess().getGroup()); }
		(rule__Architecture__Group__0)
		{ after(grammarAccess.getArchitectureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArchitectureElement
entryRuleArchitectureElement
:
{ before(grammarAccess.getArchitectureElementRule()); }
	 ruleArchitectureElement
{ after(grammarAccess.getArchitectureElementRule()); } 
	 EOF 
;

// Rule ArchitectureElement
ruleArchitectureElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArchitectureElementAccess().getAlternatives()); }
		(rule__ArchitectureElement__Alternatives)
		{ after(grammarAccess.getArchitectureElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInterface
entryRuleInterface
:
{ before(grammarAccess.getInterfaceRule()); }
	 ruleInterface
{ after(grammarAccess.getInterfaceRule()); } 
	 EOF 
;

// Rule Interface
ruleInterface 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInterfaceAccess().getGroup()); }
		(rule__Interface__Group__0)
		{ after(grammarAccess.getInterfaceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleElement
entryRuleElement
:
{ before(grammarAccess.getElementRule()); }
	 ruleElement
{ after(grammarAccess.getElementRule()); } 
	 EOF 
;

// Rule Element
ruleElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElementAccess().getGroup()); }
		(rule__Element__Group__0)
		{ after(grammarAccess.getElementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComponent
entryRuleComponent
:
{ before(grammarAccess.getComponentRule()); }
	 ruleComponent
{ after(grammarAccess.getComponentRule()); } 
	 EOF 
;

// Rule Component
ruleComponent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComponentAccess().getGroup()); }
		(rule__Component__Group__0)
		{ after(grammarAccess.getComponentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePort
entryRulePort
:
{ before(grammarAccess.getPortRule()); }
	 rulePort
{ after(grammarAccess.getPortRule()); } 
	 EOF 
;

// Rule Port
rulePort 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPortAccess().getAlternatives()); }
		(rule__Port__Alternatives)
		{ after(grammarAccess.getPortAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePPort
entryRulePPort
:
{ before(grammarAccess.getPPortRule()); }
	 rulePPort
{ after(grammarAccess.getPPortRule()); } 
	 EOF 
;

// Rule PPort
rulePPort 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPPortAccess().getGroup()); }
		(rule__PPort__Group__0)
		{ after(grammarAccess.getPPortAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRPort
entryRuleRPort
:
{ before(grammarAccess.getRPortRule()); }
	 ruleRPort
{ after(grammarAccess.getRPortRule()); } 
	 EOF 
;

// Rule RPort
ruleRPort 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRPortAccess().getGroup()); }
		(rule__RPort__Group__0)
		{ after(grammarAccess.getRPortAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule DataType
ruleDataType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataTypeAccess().getAlternatives()); }
		(rule__DataType__Alternatives)
		{ after(grammarAccess.getDataTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArchitectureElement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArchitectureElementAccess().getInterfaceParserRuleCall_0()); }
		ruleInterface
		{ after(grammarAccess.getArchitectureElementAccess().getInterfaceParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getArchitectureElementAccess().getComponentParserRuleCall_1()); }
		ruleComponent
		{ after(grammarAccess.getArchitectureElementAccess().getComponentParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Port__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPortAccess().getPPortParserRuleCall_0()); }
		rulePPort
		{ after(grammarAccess.getPortAccess().getPPortParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPortAccess().getRPortParserRuleCall_1()); }
		ruleRPort
		{ after(grammarAccess.getPortAccess().getRPortParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataTypeAccess().getStringTypeEnumLiteralDeclaration_0()); }
		('String')
		{ after(grammarAccess.getDataTypeAccess().getStringTypeEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeAccess().getIntTypeEnumLiteralDeclaration_1()); }
		('int')
		{ after(grammarAccess.getDataTypeAccess().getIntTypeEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeAccess().getBooleanTypeEnumLiteralDeclaration_2()); }
		('boolean')
		{ after(grammarAccess.getDataTypeAccess().getBooleanTypeEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeAccess().getFloatTypeEnumLiteralDeclaration_3()); }
		('float')
		{ after(grammarAccess.getDataTypeAccess().getFloatTypeEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeAccess().getDoubleTypeEnumLiteralDeclaration_4()); }
		('double')
		{ after(grammarAccess.getDataTypeAccess().getDoubleTypeEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeAccess().getVoidTypeEnumLiteralDeclaration_5()); }
		('void')
		{ after(grammarAccess.getDataTypeAccess().getVoidTypeEnumLiteralDeclaration_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Architecture__Group__0__Impl
	rule__Architecture__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArchitectureAccess().getArchitectureKeyword_0()); }
	'Architecture'
	{ after(grammarAccess.getArchitectureAccess().getArchitectureKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Architecture__Group__1__Impl
	rule__Architecture__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArchitectureAccess().getNameAssignment_1()); }
	(rule__Architecture__NameAssignment_1)
	{ after(grammarAccess.getArchitectureAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Architecture__Group__2__Impl
	rule__Architecture__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArchitectureAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getArchitectureAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Architecture__Group__3__Impl
	rule__Architecture__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArchitectureAccess().getElementsAssignment_3()); }
	(rule__Architecture__ElementsAssignment_3)*
	{ after(grammarAccess.getArchitectureAccess().getElementsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Architecture__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArchitectureAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getArchitectureAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Interface__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Interface__Group__0__Impl
	rule__Interface__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInterfaceAccess().getInterfaceKeyword_0()); }
	'interface'
	{ after(grammarAccess.getInterfaceAccess().getInterfaceKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Interface__Group__1__Impl
	rule__Interface__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInterfaceAccess().getNameAssignment_1()); }
	(rule__Interface__NameAssignment_1)
	{ after(grammarAccess.getInterfaceAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Interface__Group__2__Impl
	rule__Interface__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInterfaceAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getInterfaceAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Interface__Group__3__Impl
	rule__Interface__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInterfaceAccess().getElementsAssignment_3()); }
	(rule__Interface__ElementsAssignment_3)*
	{ after(grammarAccess.getInterfaceAccess().getElementsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Interface__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInterfaceAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getInterfaceAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Element__Group__0__Impl
	rule__Element__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementAccess().getTypeAssignment_0()); }
	(rule__Element__TypeAssignment_0)
	{ after(grammarAccess.getElementAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Element__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementAccess().getNameAssignment_1()); }
	(rule__Element__NameAssignment_1)
	{ after(grammarAccess.getElementAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Component__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Component__Group__0__Impl
	rule__Component__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentAccess().getComponentKeyword_0()); }
	'component'
	{ after(grammarAccess.getComponentAccess().getComponentKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Component__Group__1__Impl
	rule__Component__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentAccess().getNameAssignment_1()); }
	(rule__Component__NameAssignment_1)
	{ after(grammarAccess.getComponentAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Component__Group__2__Impl
	rule__Component__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getComponentAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Component__Group__3__Impl
	rule__Component__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentAccess().getPortsAssignment_3()); }
	(rule__Component__PortsAssignment_3)*
	{ after(grammarAccess.getComponentAccess().getPortsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Component__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getComponentAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PPort__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PPort__Group__0__Impl
	rule__PPort__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PPort__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPPortAccess().getProvidesKeyword_0()); }
	'provides'
	{ after(grammarAccess.getPPortAccess().getProvidesKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PPort__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PPort__Group__1__Impl
	rule__PPort__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PPort__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPPortAccess().getInterfaceAssignment_1()); }
	(rule__PPort__InterfaceAssignment_1)
	{ after(grammarAccess.getPPortAccess().getInterfaceAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PPort__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PPort__Group__2__Impl
	rule__PPort__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PPort__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPPortAccess().getViaKeyword_2()); }
	'via'
	{ after(grammarAccess.getPPortAccess().getViaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PPort__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PPort__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PPort__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPPortAccess().getNameAssignment_3()); }
	(rule__PPort__NameAssignment_3)
	{ after(grammarAccess.getPPortAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RPort__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RPort__Group__0__Impl
	rule__RPort__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RPort__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRPortAccess().getRequiresKeyword_0()); }
	'requires'
	{ after(grammarAccess.getRPortAccess().getRequiresKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RPort__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RPort__Group__1__Impl
	rule__RPort__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RPort__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRPortAccess().getInterfaceAssignment_1()); }
	(rule__RPort__InterfaceAssignment_1)
	{ after(grammarAccess.getRPortAccess().getInterfaceAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RPort__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RPort__Group__2__Impl
	rule__RPort__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RPort__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRPortAccess().getViaKeyword_2()); }
	'via'
	{ after(grammarAccess.getRPortAccess().getViaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RPort__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RPort__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RPort__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRPortAccess().getNameAssignment_3()); }
	(rule__RPort__NameAssignment_3)
	{ after(grammarAccess.getRPortAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Architecture__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArchitectureAccess().getNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getArchitectureAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__ElementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArchitectureAccess().getElementsArchitectureElementParserRuleCall_3_0()); }
		ruleArchitectureElement
		{ after(grammarAccess.getArchitectureAccess().getElementsArchitectureElementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInterfaceAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getInterfaceAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__ElementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInterfaceAccess().getElementsElementParserRuleCall_3_0()); }
		ruleElement
		{ after(grammarAccess.getInterfaceAccess().getElementsElementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementAccess().getTypeDataTypeEnumRuleCall_0_0()); }
		ruleDataType
		{ after(grammarAccess.getElementAccess().getTypeDataTypeEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getElementAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComponentAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getComponentAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__PortsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComponentAccess().getPortsPortParserRuleCall_3_0()); }
		rulePort
		{ after(grammarAccess.getComponentAccess().getPortsPortParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PPort__InterfaceAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPPortAccess().getInterfaceInterfaceCrossReference_1_0()); }
		(
			{ before(grammarAccess.getPPortAccess().getInterfaceInterfaceIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPPortAccess().getInterfaceInterfaceIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getPPortAccess().getInterfaceInterfaceCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PPort__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPPortAccess().getNameIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getPPortAccess().getNameIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RPort__InterfaceAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRPortAccess().getInterfaceInterfaceCrossReference_1_0()); }
		(
			{ before(grammarAccess.getRPortAccess().getInterfaceInterfaceIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getRPortAccess().getInterfaceInterfaceIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getRPortAccess().getInterfaceInterfaceCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RPort__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRPortAccess().getNameIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getRPortAccess().getNameIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
