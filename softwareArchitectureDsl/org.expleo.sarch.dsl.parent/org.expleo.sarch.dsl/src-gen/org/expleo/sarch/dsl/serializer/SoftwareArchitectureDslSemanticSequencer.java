/*
 * generated by Xtext 2.38.0
 */
package org.expleo.sarch.dsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.expleo.sarch.dsl.services.SoftwareArchitectureDslGrammarAccess;
import org.expleo.sarch.dsl.softwareArchitectureDsl.Architecture;
import org.expleo.sarch.dsl.softwareArchitectureDsl.Component;
import org.expleo.sarch.dsl.softwareArchitectureDsl.Element;
import org.expleo.sarch.dsl.softwareArchitectureDsl.Interface;
import org.expleo.sarch.dsl.softwareArchitectureDsl.PPort;
import org.expleo.sarch.dsl.softwareArchitectureDsl.RPort;
import org.expleo.sarch.dsl.softwareArchitectureDsl.SoftwareArchitectureDslPackage;

@SuppressWarnings("all")
public class SoftwareArchitectureDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SoftwareArchitectureDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SoftwareArchitectureDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SoftwareArchitectureDslPackage.ARCHITECTURE:
				sequence_Architecture(context, (Architecture) semanticObject); 
				return; 
			case SoftwareArchitectureDslPackage.COMPONENT:
				sequence_Component(context, (Component) semanticObject); 
				return; 
			case SoftwareArchitectureDslPackage.ELEMENT:
				sequence_Element(context, (Element) semanticObject); 
				return; 
			case SoftwareArchitectureDslPackage.INTERFACE:
				sequence_Interface(context, (Interface) semanticObject); 
				return; 
			case SoftwareArchitectureDslPackage.PPORT:
				sequence_PPort(context, (PPort) semanticObject); 
				return; 
			case SoftwareArchitectureDslPackage.RPORT:
				sequence_RPort(context, (RPort) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Architecture returns Architecture
	 *
	 * Constraint:
	 *     (name=STRING elements+=ArchitectureElement*)
	 * </pre>
	 */
	protected void sequence_Architecture(ISerializationContext context, Architecture semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ArchitectureElement returns Component
	 *     Component returns Component
	 *
	 * Constraint:
	 *     (name=ID ports+=Port*)
	 * </pre>
	 */
	protected void sequence_Component(ISerializationContext context, Component semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns Element
	 *
	 * Constraint:
	 *     (type=DataType name=ID)
	 * </pre>
	 */
	protected void sequence_Element(ISerializationContext context, Element semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftwareArchitectureDslPackage.Literals.ELEMENT__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftwareArchitectureDslPackage.Literals.ELEMENT__TYPE));
			if (transientValues.isValueTransient(semanticObject, SoftwareArchitectureDslPackage.Literals.ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftwareArchitectureDslPackage.Literals.ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getElementAccess().getTypeDataTypeEnumRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getElementAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ArchitectureElement returns Interface
	 *     Interface returns Interface
	 *
	 * Constraint:
	 *     (name=ID elements+=Element*)
	 * </pre>
	 */
	protected void sequence_Interface(ISerializationContext context, Interface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Port returns PPort
	 *     PPort returns PPort
	 *
	 * Constraint:
	 *     (interface=[Interface|ID] name=ID)
	 * </pre>
	 */
	protected void sequence_PPort(ISerializationContext context, PPort semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftwareArchitectureDslPackage.Literals.PORT__INTERFACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftwareArchitectureDslPackage.Literals.PORT__INTERFACE));
			if (transientValues.isValueTransient(semanticObject, SoftwareArchitectureDslPackage.Literals.PORT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftwareArchitectureDslPackage.Literals.PORT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPPortAccess().getInterfaceInterfaceIDTerminalRuleCall_1_0_1(), semanticObject.eGet(SoftwareArchitectureDslPackage.Literals.PORT__INTERFACE, false));
		feeder.accept(grammarAccess.getPPortAccess().getNameIDTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Port returns RPort
	 *     RPort returns RPort
	 *
	 * Constraint:
	 *     (interface=[Interface|ID] name=ID)
	 * </pre>
	 */
	protected void sequence_RPort(ISerializationContext context, RPort semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftwareArchitectureDslPackage.Literals.PORT__INTERFACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftwareArchitectureDslPackage.Literals.PORT__INTERFACE));
			if (transientValues.isValueTransient(semanticObject, SoftwareArchitectureDslPackage.Literals.PORT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftwareArchitectureDslPackage.Literals.PORT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRPortAccess().getInterfaceInterfaceIDTerminalRuleCall_1_0_1(), semanticObject.eGet(SoftwareArchitectureDslPackage.Literals.PORT__INTERFACE, false));
		feeder.accept(grammarAccess.getRPortAccess().getNameIDTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
