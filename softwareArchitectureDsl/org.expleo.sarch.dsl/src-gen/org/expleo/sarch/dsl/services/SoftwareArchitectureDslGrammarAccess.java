/*
 * generated by Xtext 2.38.0
 */
package org.expleo.sarch.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SoftwareArchitectureDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ArchitectureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.expleo.sarch.dsl.SoftwareArchitectureDsl.Architecture");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArchitectureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsArchitectureElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// Root element of your model
		//// Root element of your model
		//Architecture:
		//    'Architecture' name=STRING '{' // 'Architecture' keyword, followed by a quoted string name
		//        (elements+=ArchitectureElement)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Architecture' name=STRING '{' // 'Architecture' keyword, followed by a quoted string name
		//    (elements+=ArchitectureElement)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Architecture'
		public Keyword getArchitectureKeyword_0() { return cArchitectureKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//// 'Architecture' keyword, followed by a quoted string name
		//       (elements+=ArchitectureElement)*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//ArchitectureElement
		public RuleCall getElementsArchitectureElementParserRuleCall_3_0() { return cElementsArchitectureElementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ArchitectureElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.expleo.sarch.dsl.SoftwareArchitectureDsl.ArchitectureElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInterfaceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComponentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ArchitectureElement:
		//    Interface | Component
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Interface | Component
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Interface
		public RuleCall getInterfaceParserRuleCall_0() { return cInterfaceParserRuleCall_0; }
		
		//Component
		public RuleCall getComponentParserRuleCall_1() { return cComponentParserRuleCall_1; }
	}
	public class InterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.expleo.sarch.dsl.SoftwareArchitectureDsl.Interface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Interface:
		//    'interface' name=ID '{'
		//        (elements+=Element)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'interface' name=ID '{'
		//    (elements+=Element)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'interface'
		public Keyword getInterfaceKeyword_0() { return cInterfaceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(elements+=Element)*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_3_0() { return cElementsElementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.expleo.sarch.dsl.SoftwareArchitectureDsl.Element");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeDataTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Element:
		//    type=DataType name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=DataType name=ID
		public Group getGroup() { return cGroup; }
		
		//type=DataType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//DataType
		public RuleCall getTypeDataTypeEnumRuleCall_0_0() { return cTypeDataTypeEnumRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.expleo.sarch.dsl.SoftwareArchitectureDsl.Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPortsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPortsPortParserRuleCall_3_0 = (RuleCall)cPortsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Component:
		//    'component' name=ID '{'
		//        (ports+=Port)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'component' name=ID '{'
		//    (ports+=Port)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'component'
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(ports+=Port)*
		public Assignment getPortsAssignment_3() { return cPortsAssignment_3; }
		
		//Port
		public RuleCall getPortsPortParserRuleCall_3_0() { return cPortsPortParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.expleo.sarch.dsl.SoftwareArchitectureDsl.Port");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPPortParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRPortParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Define a common abstract base for all port types
		//Port:
		//    PPort | RPort
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PPort | RPort
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PPort
		public RuleCall getPPortParserRuleCall_0() { return cPPortParserRuleCall_0; }
		
		//RPort
		public RuleCall getRPortParserRuleCall_1() { return cRPortParserRuleCall_1; }
	}
	public class PPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.expleo.sarch.dsl.SoftwareArchitectureDsl.PPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProvidesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInterfaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cInterfaceInterfaceCrossReference_1_0 = (CrossReference)cInterfaceAssignment_1.eContents().get(0);
		private final RuleCall cInterfaceInterfaceIDTerminalRuleCall_1_0_1 = (RuleCall)cInterfaceInterfaceCrossReference_1_0.eContents().get(1);
		private final Keyword cViaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//// Define a Provides Port
		//PPort:
		//    'provides' interface=[Interface|ID] 'via' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'provides' interface=[Interface|ID] 'via' name=ID
		public Group getGroup() { return cGroup; }
		
		//'provides'
		public Keyword getProvidesKeyword_0() { return cProvidesKeyword_0; }
		
		//interface=[Interface|ID]
		public Assignment getInterfaceAssignment_1() { return cInterfaceAssignment_1; }
		
		//[Interface|ID]
		public CrossReference getInterfaceInterfaceCrossReference_1_0() { return cInterfaceInterfaceCrossReference_1_0; }
		
		//ID
		public RuleCall getInterfaceInterfaceIDTerminalRuleCall_1_0_1() { return cInterfaceInterfaceIDTerminalRuleCall_1_0_1; }
		
		//'via'
		public Keyword getViaKeyword_2() { return cViaKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}
	public class RPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.expleo.sarch.dsl.SoftwareArchitectureDsl.RPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequiresKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInterfaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cInterfaceInterfaceCrossReference_1_0 = (CrossReference)cInterfaceAssignment_1.eContents().get(0);
		private final RuleCall cInterfaceInterfaceIDTerminalRuleCall_1_0_1 = (RuleCall)cInterfaceInterfaceCrossReference_1_0.eContents().get(1);
		private final Keyword cViaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//// Define a Requires Port
		//RPort:
		//    'requires' interface=[Interface|ID] 'via' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'requires' interface=[Interface|ID] 'via' name=ID
		public Group getGroup() { return cGroup; }
		
		//'requires'
		public Keyword getRequiresKeyword_0() { return cRequiresKeyword_0; }
		
		//interface=[Interface|ID]
		public Assignment getInterfaceAssignment_1() { return cInterfaceAssignment_1; }
		
		//[Interface|ID]
		public CrossReference getInterfaceInterfaceCrossReference_1_0() { return cInterfaceInterfaceCrossReference_1_0; }
		
		//ID
		public RuleCall getInterfaceInterfaceIDTerminalRuleCall_1_0_1() { return cInterfaceInterfaceIDTerminalRuleCall_1_0_1; }
		
		//'via'
		public Keyword getViaKeyword_2() { return cViaKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}
	
	public class DataTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.expleo.sarch.dsl.SoftwareArchitectureDsl.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStringTypeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStringTypeStringKeyword_0_0 = (Keyword)cStringTypeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntTypeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntTypeIntKeyword_1_0 = (Keyword)cIntTypeEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanTypeEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBooleanTypeBooleanKeyword_2_0 = (Keyword)cBooleanTypeEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFloatTypeEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFloatTypeFloatKeyword_3_0 = (Keyword)cFloatTypeEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDoubleTypeEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDoubleTypeDoubleKeyword_4_0 = (Keyword)cDoubleTypeEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cVoidTypeEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cVoidTypeVoidKeyword_5_0 = (Keyword)cVoidTypeEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum DataType:
		//    StringType='String' | IntType='int' | BooleanType='boolean' | FloatType='float' | DoubleType='double' | VoidType='void'
		//;
		public EnumRule getRule() { return rule; }
		
		//StringType='String' | IntType='int' | BooleanType='boolean' | FloatType='float' | DoubleType='double' | VoidType='void'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringType='String'
		public EnumLiteralDeclaration getStringTypeEnumLiteralDeclaration_0() { return cStringTypeEnumLiteralDeclaration_0; }
		
		//'String'
		public Keyword getStringTypeStringKeyword_0_0() { return cStringTypeStringKeyword_0_0; }
		
		//IntType='int'
		public EnumLiteralDeclaration getIntTypeEnumLiteralDeclaration_1() { return cIntTypeEnumLiteralDeclaration_1; }
		
		//'int'
		public Keyword getIntTypeIntKeyword_1_0() { return cIntTypeIntKeyword_1_0; }
		
		//BooleanType='boolean'
		public EnumLiteralDeclaration getBooleanTypeEnumLiteralDeclaration_2() { return cBooleanTypeEnumLiteralDeclaration_2; }
		
		//'boolean'
		public Keyword getBooleanTypeBooleanKeyword_2_0() { return cBooleanTypeBooleanKeyword_2_0; }
		
		//FloatType='float'
		public EnumLiteralDeclaration getFloatTypeEnumLiteralDeclaration_3() { return cFloatTypeEnumLiteralDeclaration_3; }
		
		//'float'
		public Keyword getFloatTypeFloatKeyword_3_0() { return cFloatTypeFloatKeyword_3_0; }
		
		//DoubleType='double'
		public EnumLiteralDeclaration getDoubleTypeEnumLiteralDeclaration_4() { return cDoubleTypeEnumLiteralDeclaration_4; }
		
		//'double'
		public Keyword getDoubleTypeDoubleKeyword_4_0() { return cDoubleTypeDoubleKeyword_4_0; }
		
		//VoidType='void'
		public EnumLiteralDeclaration getVoidTypeEnumLiteralDeclaration_5() { return cVoidTypeEnumLiteralDeclaration_5; }
		
		//'void'
		public Keyword getVoidTypeVoidKeyword_5_0() { return cVoidTypeVoidKeyword_5_0; }
	}
	
	private final ArchitectureElements pArchitecture;
	private final ArchitectureElementElements pArchitectureElement;
	private final InterfaceElements pInterface;
	private final ElementElements pElement;
	private final DataTypeElements eDataType;
	private final ComponentElements pComponent;
	private final PortElements pPort;
	private final PPortElements pPPort;
	private final RPortElements pRPort;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SoftwareArchitectureDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pArchitecture = new ArchitectureElements();
		this.pArchitectureElement = new ArchitectureElementElements();
		this.pInterface = new InterfaceElements();
		this.pElement = new ElementElements();
		this.eDataType = new DataTypeElements();
		this.pComponent = new ComponentElements();
		this.pPort = new PortElements();
		this.pPPort = new PPortElements();
		this.pRPort = new RPortElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.expleo.sarch.dsl.SoftwareArchitectureDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// Root element of your model
	//// Root element of your model
	//Architecture:
	//    'Architecture' name=STRING '{' // 'Architecture' keyword, followed by a quoted string name
	//        (elements+=ArchitectureElement)*
	//    '}'
	//;
	public ArchitectureElements getArchitectureAccess() {
		return pArchitecture;
	}
	
	public ParserRule getArchitectureRule() {
		return getArchitectureAccess().getRule();
	}
	
	//ArchitectureElement:
	//    Interface | Component
	//;
	public ArchitectureElementElements getArchitectureElementAccess() {
		return pArchitectureElement;
	}
	
	public ParserRule getArchitectureElementRule() {
		return getArchitectureElementAccess().getRule();
	}
	
	//Interface:
	//    'interface' name=ID '{'
	//        (elements+=Element)*
	//    '}'
	//;
	public InterfaceElements getInterfaceAccess() {
		return pInterface;
	}
	
	public ParserRule getInterfaceRule() {
		return getInterfaceAccess().getRule();
	}
	
	//Element:
	//    type=DataType name=ID
	//;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//enum DataType:
	//    StringType='String' | IntType='int' | BooleanType='boolean' | FloatType='float' | DoubleType='double' | VoidType='void'
	//;
	public DataTypeElements getDataTypeAccess() {
		return eDataType;
	}
	
	public EnumRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//Component:
	//    'component' name=ID '{'
	//        (ports+=Port)*
	//    '}'
	//;
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//// Define a common abstract base for all port types
	//Port:
	//    PPort | RPort
	//;
	public PortElements getPortAccess() {
		return pPort;
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}
	
	//// Define a Provides Port
	//PPort:
	//    'provides' interface=[Interface|ID] 'via' name=ID
	//;
	public PPortElements getPPortAccess() {
		return pPPort;
	}
	
	public ParserRule getPPortRule() {
		return getPPortAccess().getRule();
	}
	
	//// Define a Requires Port
	//RPort:
	//    'requires' interface=[Interface|ID] 'via' name=ID
	//;
	public RPortElements getRPortAccess() {
		return pRPort;
	}
	
	public ParserRule getRPortRule() {
		return getRPortAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
