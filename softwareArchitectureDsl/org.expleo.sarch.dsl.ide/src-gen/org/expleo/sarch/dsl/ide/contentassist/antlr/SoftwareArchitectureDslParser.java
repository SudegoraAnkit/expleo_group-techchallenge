/*
 * generated by Xtext 2.38.0
 */
package org.expleo.sarch.dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.expleo.sarch.dsl.ide.contentassist.antlr.internal.InternalSoftwareArchitectureDslParser;
import org.expleo.sarch.dsl.services.SoftwareArchitectureDslGrammarAccess;

public class SoftwareArchitectureDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SoftwareArchitectureDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SoftwareArchitectureDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getArchitectureElementAccess().getAlternatives(), "rule__ArchitectureElement__Alternatives");
			builder.put(grammarAccess.getPortAccess().getAlternatives(), "rule__Port__Alternatives");
			builder.put(grammarAccess.getDataTypeAccess().getAlternatives(), "rule__DataType__Alternatives");
			builder.put(grammarAccess.getArchitectureAccess().getGroup(), "rule__Architecture__Group__0");
			builder.put(grammarAccess.getInterfaceAccess().getGroup(), "rule__Interface__Group__0");
			builder.put(grammarAccess.getElementAccess().getGroup(), "rule__Element__Group__0");
			builder.put(grammarAccess.getComponentAccess().getGroup(), "rule__Component__Group__0");
			builder.put(grammarAccess.getPPortAccess().getGroup(), "rule__PPort__Group__0");
			builder.put(grammarAccess.getRPortAccess().getGroup(), "rule__RPort__Group__0");
			builder.put(grammarAccess.getArchitectureAccess().getNameAssignment_1(), "rule__Architecture__NameAssignment_1");
			builder.put(grammarAccess.getArchitectureAccess().getElementsAssignment_3(), "rule__Architecture__ElementsAssignment_3");
			builder.put(grammarAccess.getInterfaceAccess().getNameAssignment_1(), "rule__Interface__NameAssignment_1");
			builder.put(grammarAccess.getInterfaceAccess().getElementsAssignment_3(), "rule__Interface__ElementsAssignment_3");
			builder.put(grammarAccess.getElementAccess().getTypeAssignment_0(), "rule__Element__TypeAssignment_0");
			builder.put(grammarAccess.getElementAccess().getNameAssignment_1(), "rule__Element__NameAssignment_1");
			builder.put(grammarAccess.getComponentAccess().getNameAssignment_1(), "rule__Component__NameAssignment_1");
			builder.put(grammarAccess.getComponentAccess().getPortsAssignment_3(), "rule__Component__PortsAssignment_3");
			builder.put(grammarAccess.getPPortAccess().getInterfaceAssignment_1(), "rule__PPort__InterfaceAssignment_1");
			builder.put(grammarAccess.getPPortAccess().getNameAssignment_3(), "rule__PPort__NameAssignment_3");
			builder.put(grammarAccess.getRPortAccess().getInterfaceAssignment_1(), "rule__RPort__InterfaceAssignment_1");
			builder.put(grammarAccess.getRPortAccess().getNameAssignment_3(), "rule__RPort__NameAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SoftwareArchitectureDslGrammarAccess grammarAccess;

	@Override
	protected InternalSoftwareArchitectureDslParser createParser() {
		InternalSoftwareArchitectureDslParser result = new InternalSoftwareArchitectureDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SoftwareArchitectureDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SoftwareArchitectureDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
